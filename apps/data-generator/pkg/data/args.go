package data

import (
	"github.com/spf13/pflag"
	"os"
)

// ----------------------------------------------------------------------------------
// command line options
var (
	clearPrevious    *bool
	onlyParse        *bool
	numberOfNS       *int
	numberOfServices *int
	numberOfPods     *int
	nsPrefix         *string
	servicePrefix    *string
	podPrefix        *string
	numberOfCalls    *int
	startDate        *string
	endDate          *string
	hourDatetime     *string
	hoursCount       *int
	pgConnectionUrl  *string
	pgSslMode        *string
	pgPathToCA       *string
	minioEndpoint    *string
	minioAccessKey   *string
	minioSecretKey   *string
	minioBucket      *string
	minioInsecureSSL *bool
	minioUseSSL      *bool
	minioPathToCA    *string
)

func InitFlags(flags *pflag.FlagSet) {
	clearPrevious = flags.Bool("clear", true, "Will clear old data from previous runs in `output` directory")
	onlyParse = flags.Bool("parse", false, "Only parse original binary data from tcp-dump")
	numberOfNS = flags.Int("namespaces", 2, "The number of namespaces in emulated cloud")
	numberOfServices = flags.Int("services", 3, "The number of services for each namespace in emulated cloud")
	numberOfPods = flags.Int("pods", 1, "The number of pod replicas for each service in each namespace")
	nsPrefix = flags.String("ns", "test.namespace", "The prefix for generated namespace name")
	servicePrefix = flags.String("svc", "test.service", "The prefix for generated service name")
	podPrefix = flags.String("pod", "test.pod", "The prefix for generated pod name")
	numberOfCalls = flags.Int("calls", -100, "The number of calls generated by each pods in 5 minutes")
	startDate = flags.String("startdate", "", "Start date in yyyy/mm/dd format. Generate data in S3 starting from this day")
	endDate = flags.String("enddate", "", "End date in yyyy/mm/dd format. If empty, it will be set to the current time")
	hourDatetime = flags.String("starttime", "", "Start date in yyyy/mm/dd/hh format. Generate recent data in Postgres starting from this hour")
	hoursCount = flags.Int("hours", 1, "Generate recent data in Postgres for these hours")
	pgConnectionUrl = flags.String("pg.url", "", "Full connection string to Postgres instance")
	pgSslMode = flags.String("pg.ssl_mode", "prefer", "SSL mode for PG connections. Possible values: disable, allow, prefer, require, verify-ca, verify-full")
	pgPathToCA = flags.String("pg.ca_file", "", "Path to custom CA certificate for PG")
	minioEndpoint = flags.String("minio.url", os.Getenv("MINIO_ENDPOINT"), "Url to Minio instance")
	minioAccessKey = flags.String("minio.key", os.Getenv("MINIO_ACCESS_KEY_ID"), "Minio access key")
	minioSecretKey = flags.String("minio.secret", os.Getenv("MINIO_SECRET_ACCESS_KEY"), "Minio secret key")
	minioBucket = flags.String("minio.bucket", os.Getenv("MINIO_BUCKET"), "Bucket in Minio")
	minioInsecureSSL = flags.Bool("minio.insecure", false, "Use flag insecure for Minio")
	minioUseSSL = flags.Bool("minio.use_ssl", false, "Use TLS access for Minio")
	minioPathToCA = flags.String("minio.ca_file", "", "Path to custom CA certificate for Minio")
}
