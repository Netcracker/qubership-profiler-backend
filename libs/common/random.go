package common

import (
	crypto_rand "crypto/rand"
	"fmt"
	"math/rand"
	"time"
)

// RandomUuid generate Uuid with simple uuid (struct: []byte + str)
// NB: skips error!
func RandomUuid() Uuid {
	c, _ := RandomUuidVal()
	return ToUuid(c)
}

// RandomUuidVal generate UUID ([]byte) with simple uuid {0xC3,0x69,0x07,0xB4,0xD2,0xF3,0xA4,0xB0,0x1F,0xB5,0x19,0x7D,0x08,0x1D,0xF0,0xB1}
func RandomUuidVal() (UUID, error) {
	b := make([]byte, 16)
	n, err := crypto_rand.Read(b)
	if n != 16 {
		err = fmt.Errorf("invalid count (%d) of generated bytes", n)
	}
	c := [16]byte(b)
	return c, err
}

// RandomUuidString generate string with simple uuid (like "C3:69:07:B4:D2:F3:A4:B0:1F:B5:19:7D:08:1D:F0:B1")
func RandomUuidString() string {
	b, err := RandomUuidVal()
	if err != nil {
		return ""
	}
	return ToHex(b)
}

// Random generate random int in range [from, to]
func Random(from, to int64) int64 {
	if from > to {
		from = 0
	}
	if from == to {
		return from
	}
	return rand.Int63n(to-from) + from
}

// RandomTime generate random ts in same hour (according to local timezone)
func RandomTime(hour time.Time) time.Time {
	return hour.Truncate(time.Hour).Add(time.Duration(rand.Int31n(60*60*1000)) * time.Millisecond)
}

// RandomUtcTime generate random ts in same hour (according to UTC timezone)
func RandomUtcTime(hour time.Time) time.Time {
	return hour.UTC().Truncate(time.Hour).Add(time.Duration(rand.Int31n(60*60*1000)) * time.Millisecond)
}
